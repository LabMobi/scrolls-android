apply plugin: 'signing'
apply plugin: 'com.android.library'
apply plugin: 'com.vanniktech.maven.publish'

buildscript {
    repositories {
        google()
        mavenCentral()
    }
}

android {
    namespace = "mobi.lab.scrolls"

    buildFeatures {
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion project.ext.versionCompileSdk
    defaultConfig {
        minSdkVersion project.ext.versionMinSdkVersion
        targetSdkVersion project.ext.versionTargetSdk
        versionName project.ext.versionName
        versionCode project.ext.versionCode
        project.archivesBaseName = "scrolls-" + project.ext.versionName
        // Use a separate field for the version name
        buildConfigField "String", 'VERSION_NAME', "\"${project.ext.versionName}\""

        println 'CONF: versionName is set to: ' + project.ext.versionName
        println 'CONF: publishVersionName is set to: ' + project.ext.publishVersionName
        println 'CONF: versionCode is set to: ' + project.ext.versionCode
        println 'CONF: is a release build: ' + project.ext.isRelease
    }

    libraryVariants.configureEach { variant ->
        def variantVersionName = "unknown"
        def variantVersionFileName = ""
        if (variant.getName() == "debug") {
            variantVersionName = "debug"
            variantVersionFileName = "-debug"
        } else if (variant.getName() == "release") {
            variantVersionName = "release"
            variantVersionFileName = ""
        }
        variant.outputs.all {
            output ->
                outputFileName = "${project.name}-${variantVersionName}.aar"
        }
    }
}

project.ext.libFiles = fileTree(project(':scrolls-lib').projectDir.absolutePath + '/build/outputs/aar/') {
    include '*.aar'
}

project.ext.libProguardFiles = fileTree(project(':scrolls-lib').projectDir.absolutePath + '/build/outputs/mapping/release') {
    include '*mapping.txt'
}

task(lib_copy_artifacts) doLast {
    if (project.ext.artifactDir != null) {
        println "Coping Scrolls Library artifacts to " + project.ext.artifactDir + " .."
        copy {
            rename('mapping.txt', "${project.name}-mapping-${project.ext.versionCode}.txt")
            from libFiles
            from libProguardFiles
            into file(project.ext.artifactDir)
            eachFile { println it.file }
        }
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.0'
}

mavenPublishing {
    // the first parameter represents which variant is published
    // the second whether to publish a sources jar
    // the third whether to publish a javadoc jar
    //configure(new AndroidSingleVariantLibrary("release", true, true))

    // false - manual release required via https://central.sonatype.com/publishing/deployments
    publishToMavenCentral(false)

    signAllPublications()

    coordinates("mobi.lab.scrolls", "scrolls", "${project.ext.publishVersionName}")

    pom {
        name = "Scrolls Logging library."
        description = "Scrolls v2 library for Android. Allows file logging and log sharing via the system share action."
        inceptionYear = "2019"
        url = "https://github.com/MobiSolutions/scrolls-android"
        licenses {
            license {
                name = "The MIT License"
                url = "https://opensource.org/licenses/mit-license.php"
                distribution = "https://opensource.org/licenses/mit-license.php"
            }
        }
        developers {
            developer {
                id = "android@lab.mobi"
                name = "Mobi Lab"
                url = "https://lab.mobi"
            }
        }
        scm {
            connection = 'https://github.com/MobiSolutions/scrolls-android.git'
            developerConnection = 'https://github.com/MobiSolutions/scrolls-android.git'
            url = 'https://github.com/MobiSolutions/scrolls-android'
        }
    }
}

tasks.register('buildAndPublishRelease') {
    group = "Publish"
    description = "Build the library release version and publish it"
    dependsOn ":scrolls-sample-java:buildAllRelease", "publishToMavenCentral"
}

publishToMavenCentral.mustRunAfter tasks.findByPath(':scrolls-sample-java:buildAllRelease')

ext {
    libraryVersion = project.ext.publishVersionName
}




